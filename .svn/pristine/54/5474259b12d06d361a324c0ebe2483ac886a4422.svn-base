package com.signalway.highway.service.impl;

import com.signalway.highway.dao.ImageMatchDao.ImageMatchDao;
import com.signalway.highway.entity.MapPojo;
import com.signalway.highway.entity.MapQueryPojo;
import com.signalway.highway.service.ImageMatchService;
import com.signalway.highway.util.ImageUtil;
import com.signalway.highway.util.PropertiesUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created by ZhangGang on 2017/5/15.
 */
@Service("imageMatchService")
public class ImageMatchServiceImpl implements ImageMatchService {

  @Autowired
  ImageMatchDao imageMatchDao;
  CountDownLatch latch = null;
  @Override
  public List<MapQueryPojo> ImageMergeInfoList(MapQueryPojo listQueryPojo)  {
    int i =0;
    Properties filePathInfo = PropertiesUtils.load("conf/filepath.properties");
    List<MapQueryPojo> mapQueryPojoList = imageMatchDao.ImageMergeInfoList(listQueryPojo);

    for (MapQueryPojo mapQueryPojo:mapQueryPojoList) {

      List<MapPojo> list = imageMatchDao.ImageMatchBlobList(mapQueryPojo);

      byte[] bbcc = null;
      try {

        for (MapPojo mapPojo:list) {

          bbcc = (byte[]) mapPojo.getTile();
          ++i;
          System.out.println(bbcc);
          ByteArrayInputStream bais = new ByteArrayInputStream(bbcc);
          BufferedImage bi1 = ImageIO.read(bais);
          //创建临时文件
          String strPath = filePathInfo.getProperty("filepath.temp");
          File file = new File(strPath);
          if(!file.exists()){
            file.mkdirs();
            System.out.println("创建临时文件");
          }
          File w2 = new File(filePathInfo.getProperty("filepath.temp")+mapPojo.getZoom()+"_"+mapPojo.getY()+"_"+mapPojo.getX()+".jpg");//可以是jpg,png,gif格式
          ImageIO.write(bi1, "jpg", w2);//不管输出什么格式图片，此处不需改动
        }

        System.out.println("总瓦片数："+i);
        i =0;
        //拼接图片
        ImageUtil.TestMapPrint(mapQueryPojo);

      } catch (IOException e) {

        e.printStackTrace();
      }

    }

    return mapQueryPojoList;
  }

  @Override
  public void SaveImageMergeInfo() throws InterruptedException {

      Properties filePathInfo = PropertiesUtils.load("conf/filepath.properties");
     //依次执行9到18级的导入
      String filePathName = filePathInfo.getProperty("filepath.Insert.14");
      File filePathIn = new File(filePathName);
      File[] filePaths= filePathIn.listFiles();
      //获取所有文件路径
      latch = new CountDownLatch(filePaths.length);//线程计数器
      ExecutorService executor = Executors.newFixedThreadPool(4);//4个线程，4个线程以上无区别，疑惑
      int index = 0;
     System.out.println("文件总量："+filePaths.length);
      for (File filepath:filePaths) {
        executor.execute(new Image( imageMatchDao,  latch,  filepath,  index));
        index++;
      //  ImageFunc(filepath);
      }
        System.out.println("任务提交完毕：" + index);
        executor.shutdown();
        latch.await();
      }

      //单线程对比测试。
      public void ImageFunc(File filepath){
        try
        {
          List<MapPojo> mapPojoList = new ArrayList<>();
          List<String> list = new ArrayList<String>();
          //  filePath :"D:\\ImageMatch\\S43_18_Insert\\18_210304_113962_210367_114025";
          String filePath = filepath.getAbsolutePath();
          System.out.println("下个文件路径："+filepath);
          //遍历此路径下的所有jpg文件
          list = ImageUtil.getListFiles(filePath,"jpg",true,list);
          String[] splits = filePath.split("\\\\");
          String[] strings = splits[splits.length-1].split("_");
          int zoom = Integer.valueOf(strings[0]);

          int Xstart = Integer.valueOf(strings[1]);
          int Ystart =  Integer.valueOf(strings[2]);
          for (int i=0;i<list.size();i++ ) {

            File file = new File(list.get(i));
            boolean flag =  ImageUtil.TestColor(file.getAbsolutePath());
            //不是纯色
            if(!flag){

              InputStream inputStream = new FileInputStream(file);
              byte[] bytes = new byte[inputStream.available()];
              inputStream.read(bytes, 0 ,bytes.length);
              System.out.println(file.getAbsolutePath()+"======="+file.getName());
              String filename = file.getName().substring(0,file.getName().length()-4);
              String[] Zoom_X_Y = filename.split("-");
              System.out.println(Zoom_X_Y[0]+"==="+Zoom_X_Y[1]+"==="+Zoom_X_Y[2]);
              int Zoffset = Integer.parseInt(Zoom_X_Y[0]);
              int Xoffset = Integer.valueOf(Zoom_X_Y[1]);
              int Yoffset = Integer.valueOf(Zoom_X_Y[2]);
              double divisor = 0.0;
              if(zoom ==18){ //最小原子是13  64X64
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset){
                  //对应18级
                  case 6:
                    divisor = Math.pow(2,(6-Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,18,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                  //对应17级
                  case 5:
                    divisor = Math.pow(2,(6-Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,17,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                  //对应16级
                  case 4:
                    divisor = Math.pow(2,(6-Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,16,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                  //对应15级
                  case 3:
                    divisor = Math.pow(2,(6-Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,15,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                  default:break;
                }

              }else if(zoom ==14){ //最小原子是10 16X16
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应14级
                  case 6:
                    divisor = Math.pow(2, (6 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,14,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              }else if(zoom ==13){ //最小原子是7 1X1
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应13级
                  case 6:
                    divisor = Math.pow(2, (6 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,13,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              } else if(zoom ==12){ //最小原子是7 1X1
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应12级
                  case 5:
                    divisor = Math.pow(2, (5 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,12,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              }else if(zoom ==11){ //最小原子是7 1X1
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应11级
                  case 4:
                    divisor = Math.pow(2, (4 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,11,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              } else if(zoom ==10){ //最小原子是7 1X1
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应10级
                  case 3:
                    divisor = Math.pow(2, (3 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,10,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              }else if(zoom ==9){ //最小原子是7 1X1
                MapPojo mapPojo = new MapPojo();
                switch (Zoffset) {
                  //对应9级
                  case 2:
                    divisor = Math.pow(2, (2 - Zoffset));
                    mapPojo = sealMaoPojo(mapPojo,divisor,9,Xstart,Ystart,Xoffset,Yoffset,bytes);
                    mapPojoList.add(mapPojo);
                    break;
                }
              }
              System.out.println("总数："+list.size()+"===下标："+i);
            }

          }
          imageMatchDao.SaveImageMergeInfoList(mapPojoList);
          System.out.println("=====当前线程的文件夹："+filepath);
          System.out.println("=====当前线程处理数据量："+mapPojoList.size());
          mapPojoList.clear();
          System.out.println("瓦片总数："+list.size());


        }catch (IOException ex){

          ex.printStackTrace();
        }

      }

  //返回实体
  public MapPojo sealMaoPojo( MapPojo mapPojo,
                              double divisor,
                              int zoom,
                              int Xstart,
                              int Ystart ,
                              int Xoffset ,
                              int Yoffset,
                              byte[] bytes){
    int tileX = (int) Math.floor(Xstart / divisor) + Xoffset;
    int tileY = (int) Math.floor(Ystart / divisor) + Yoffset;
    mapPojo.setType(47626774);
    mapPojo.setZoom(zoom);
    mapPojo.setX(tileX);
    mapPojo.setY(tileY);
    mapPojo.setTile(bytes);
    return mapPojo;
  }

  @Override
  public void InsertImageMergeInfoList(List<MapQueryPojo> mapQueryPojos){

    imageMatchDao.InsertImageMergeInfoList(mapQueryPojos);


  }

}


